import arcpyclass Toolbox(object):    def __init__(self):        self.label = "Toolbox"        self.alias = "toolbox"        self.tools = [AttributeCanvas]class AttributeCanvas(object):    def __init__(self):        self.label = "Attribute Canvas"        self.description = "Adds a shapefile to the current map in ArcGIS Pro and applies a choropleth symbology based on a selected attribute."        self.canRunInBackground = False        self.current_attribute_index = 0    def getParameterInfo(self):        # Input Shapefile        in_shapefile = arcpy.Parameter(            displayName="Input Shapefile",            name="input_shapefile",            datatype="DEShapefile",            parameterType="Required",            direction="Input"        )        # Attribute Field        in_unique_field = arcpy.Parameter(            displayName='Name field',            name='in_unique_field',            datatype='Field',            parameterType='Required',            direction='Input')        in_unique_field.filter.list = ['Short', 'Long', 'Float', 'Double']  # Filtering numeric types        in_unique_field.parameterDependencies = [in_shapefile.name]                # Map Type        in_map_type = arcpy.Parameter(            displayName='Type of map',            name='in_map_type',            datatype='GPString',            parameterType='Required',            direction='Input')        in_map_type.filter.list = ['Graduated colors', 'Graduated symbols']        # Map Breaks        in_class_num = arcpy.Parameter(            displayName='Number of Classes',            name='in_class_num',            datatype='GPLong',            parameterType='Required',            direction='Input')        in_class_num.value = 5  # Set default        # Map Colors        in_map_colors = arcpy.Parameter(            displayName='Colors of map',            name='in_map_colors',            datatype='GPString',            parameterType='Required',            direction='Input')        in_map_colors.filter.list = ['Greens', 'Oranges', 'Purples', 'Red to Green', 'Reds']        # Next Attribute Button        next_attribute_btn = arcpy.Parameter(            displayName='Next Attribute',            name='next_attribute_btn',            datatype='GPBoolean',            parameterType='Optional',            direction='Input')        # Previous Attribute Button        prev_attribute_btn = arcpy.Parameter(            displayName='Previous Attribute',            name='prev_attribute_btn',            datatype='GPBoolean',            parameterType='Optional',            direction='Input')        params = [in_shapefile, in_unique_field, in_map_type, in_class_num, in_map_colors, next_attribute_btn, prev_attribute_btn]        return params    def updateParameters(self, parameters):        return    def isLicensed(self):        return True    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        # Get information from parameters set by user        input_shapefile = parameters[0].valueAsText        attribute_field = parameters[1].valueAsText        map_type = parameters[2].valueAsText        map_breaks = parameters[3].value        map_colors = parameters[4].valueAsText        next_attribute_btn = parameters[5].value        prev_attribute_btn = parameters[6].value        # Get current map        aprx = arcpy.mp.ArcGISProject("CURRENT")        map_obj = aprx.activeMap        # Check if there is an attribute layer already existing in the map for previous/next attribute button, if not then continue as if those were not pressed        try:            old_layer = map_obj.listLayers('Attribute Layer')[0]            field_list = arcpy.ListFields(input_shapefile)            attribute_fields = [field.name for field in field_list if field.type in ('Short', 'Long', 'Integer', 'Float', 'Double', 'SmallInteger','Single')]            cur_index = attribute_fields.index(old_layer.symbology.renderer.classificationField)            arcpy.AddMessage(old_layer.symbology.renderer.classificationField)        except:            next_attribute_btn = False            prev_attribute_btn = False        # Check if the next attribute button is pressed        if next_attribute_btn:            # Error if both next and previous are hit at the same time            if prev_attribute_btn:                arcpy.AddError('Please select only one of the Previous or Next Atrribute Buttons')                return            # Change current attribute to the next one in the list            if cur_index < len(attribute_fields) - 1:                cur_index = cur_index + 1            else:                cur_index = 0            attribute_field = attribute_fields[cur_index]        # If the previous attribute button is pressed        elif prev_attribute_btn:            # Change current attribute to the next one in the list            if cur_index > 0:                cur_index = cur_index - 1            else:                cur_index = len(attribute_fields) - 1            attribute_field = attribute_fields[cur_index]        # Create and add the layer        layer = arcpy.MakeFeatureLayer_management(input_shapefile, "Attribute Layer").getOutput(0)        map_obj.addLayer(layer)        # Set variables for changing symbology        layer = aprx.activeMap.listLayers('Attribute Layer')[0]        symbology = layer.symbology        # Symbology Type        if map_type == 'Graduated colors':            symbology.renderer.type            symbology.updateRenderer('GraduatedColorsRenderer')        else:            symbology.renderer.type            symbology.updateRenderer('GraduatedSymbolsRenderer')        # Change symbology        symbology.renderer.classificationField = attribute_field        symbology.renderer.breakCount = map_breaks        symbology.renderer.colorRamp = aprx.listColorRamps(map_colors)[0]        layer.symbology = symbology        return